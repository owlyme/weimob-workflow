import { NodeConfig } from '../core/types';
import { nodeTypeSet } from '../constant';
import { CommonNode, CollapseNode } from "./baseNode";

export default [
    {
        icon: 'listenerIcon',
        label: 'Listener',
        nodeType: nodeTypeSet.NODE_TYPE_LISTENER,
        draggable: false,
        deleteForbidden: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'endIcon',
        label: 'End',
        nodeType: nodeTypeSet.NODE_TYPE_END,
        draggable: false,
        showActions: false,
        childrenAbleTypes: [],
        nodeId: "n-000",
        configCompleteStatus: true,
        reactNode: CommonNode,
    },
    {
        icon: 'mqIcon',
        label: 'Artemis',
        nodeType: nodeTypeSet.NODE_TYPE_ARTEMIS,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'mqIcon',
        label: 'MQ',
        nodeType: nodeTypeSet.NODE_TYPE_MQ,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'asyncIcon',
        label: 'Async',
        nodeType: nodeTypeSet.NODE_TYPE_ASYNC,
        childrenAbleTypes: [nodeTypeSet.NODE_TYPE_ASYNC_CHILD],
        draggable: true,
        configCompleteStatus: true,
        reactNode: CollapseNode,
        children: []
    },
    {
        icon: 'choiceIcon',
        label: 'Choice',
        nodeType: nodeTypeSet.NODE_TYPE_CHOICE,
        draggable: true,
        configCompleteStatus: true,
        childrenAbleTypes: [nodeTypeSet.NODE_TYPE_CHOICE_WHEN, nodeTypeSet.NODE_TYPE_CHOICE_DEFAULT],
        reactNode: CollapseNode,
        children: [],
    },
    {
        icon: 'connectorIcon',
        label: 'Connector',
        nodeType: nodeTypeSet.NODE_TYPE_CONNECTOR,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'syncIcon',
        label: 'ForEach',
        nodeType: nodeTypeSet.NODE_TYPE_FOR_EACH,
        childrenAbleTypes: [nodeTypeSet.NODE_TYPE_FOR_EACH_CHILD],
        draggable: true,
        configCompleteStatus: false,
        reactNode: CollapseNode,
        children: [],
    },
    {
        icon: 'objectStoreIcon',
        label: 'ObjectStore',
        nodeType: nodeTypeSet.NODE_TYPE_OBJECT_STORE,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CollapseNode,
    },
    {
        icon: 'parallelIcon',
        label: 'Parallel',
        nodeType: nodeTypeSet.NODE_TYPE_PARALLEL_AGGR,
        childrenAbleTypes: [nodeTypeSet.NODE_TYPE_PARALLEL_CHILD],
        draggable: true,
        configCompleteStatus: true,
        reactNode: CollapseNode,
        children: [],
    },
    {
        icon: 'processorIcon',
        label: 'Processor',
        nodeType: nodeTypeSet.NODE_TYPE_PROCESSOR,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'redisIcon',
        label: 'Redis',
        nodeType: nodeTypeSet.NODE_TYPE_REDIS,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'setContextIcon',
        label: 'Set Context',
        nodeType: nodeTypeSet.NODE_TYPE_SET_CONTEXT,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'setPayloadIcon',
        label: 'Set Payload',
        nodeType: nodeTypeSet.NODE_TYPE_SET_PAYLOAD,
        draggable: true,
        childrenAbleTypes: [],
        reactNode: CommonNode,
    },
    {
        icon: 'syncIcon',
        label: 'Sync',
        nodeType: nodeTypeSet.NODE_TYPE_SYNC,
        childrenAbleTypes: [nodeTypeSet.NODE_TYPE_SYNC_CHILD],
        draggable: true,
        configCompleteStatus: true,
        reactNode: CollapseNode,
        children: [],
    },
    {
        icon: 'transformerIcon',
        label: 'Transformer',
        nodeType: nodeTypeSet.NODE_TYPE_TRANSFORMER,
        draggable: true,
        childrenAbleTypes: [],
        configCompleteStatus: true,
        reactNode: CollapseNode,
    },
    {
        icon: 'tryIcon',
        label: 'TryCatch',
        nodeType: nodeTypeSet.NODE_TYPE_TRY,
        draggable: true,
        configCompleteStatus: true,
        reactNode: CollapseNode,
        childrenAbleTypes: [
            nodeTypeSet.NODE_TYPE_TRY_NORMAL,
            nodeTypeSet.NODE_TYPE_TRY_CATCH,
            nodeTypeSet.NODE_TYPE_TRY_FINALLY,
        ],

        children: [
            //   {
            //     ...normalConfig,
            //   },
            //   {
            //     ...catchConfig,
            //   },
            //   {
            //     ...finallyConfig
            //   },
        ],
    }
] as Array<NodeConfig>
